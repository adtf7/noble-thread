<%- include('../../views/partials/admin/header.ejs') %>
<div class="flex-1 p-6">
    <div class="flex justify-between items-center mb-4">
        <h2 class="text-3xl font-semibold">Coupons</h2>
        <button onclick="addCoupon()" class="bg-blue-600 text-white px-4 py-2 rounded-lg shadow hover:bg-blue-700 transition">Add Coupon</button>
    </div>

    <div class="bg-blue-100 text-blue-800 font-semibold px-4 py-2 rounded-lg shadow-md w-fit" style="margin-left: 7.5cm;">
        Total Coupons: <%= totalCoupons %>
    </div>

    <div class="bg-white p-4 shadow rounded">
        <table class="w-[80%] ml-auto text-left border-collapse shadow-lg rounded-lg overflow-hidden">
            <thead class="bg-gray-800 text-white">
                <tr>
                    <th class="p-3">#</th>
                    <th class="p-3">Name</th>
                    <th class="p-3">Expire On</th>
                    <th class="p-3">Offer (%)</th>
                    <th class="p-3">Min Price (%)</th>
                    <th class="p-3">Max Discount (%)</th>
                    <th class="p-3">Status</th>
                    <th class="p-3">Actions</th>
                </tr>
            </thead>
            <tbody>
                <% coupons.forEach((coupon, index) => { %>
                    <tr class="border-b hover:bg-gray-100 transition">
                        <td class="p-3"><%= index + 1 %></td>
                        <td class="p-3"><%= coupon.name %></td>
                        <td class="p-3"><%= coupon.expireOn.toLocaleDateString() %></td>
                        <td class="p-3"><%= coupon.offerPrice %>%</td>
                        <td class="p-3"><%= coupon.minimumPrice %>%</td>
                        <td class="p-3"><%= coupon.maxDiscount %>%</td>
                        <td class="p-3">
                            <% if (coupon.isList) { %>
                                <span class="bg-green-200 text-green-800 px-3 py-1 rounded-full text-sm">Listed</span>
                            <% } else { %>
                                <span class="bg-red-200 text-red-800 px-3 py-1 rounded-full text-sm">Unlisted</span>
                            <% } %>
                        </td>
                        <td class="p-3 flex space-x-2">
                            <% if (coupon.isList) { %>
                                <button onclick="confirmUnlistCoupon('<%= coupon._id %>')" class="bg-red-500 text-white px-4 py-2 rounded-lg shadow hover:bg-red-700 transition">Unlist</button>
                            <% } else { %>
                                <button onclick="confirmListCoupon('<%= coupon._id %>')" class="bg-green-500 text-white px-4 py-2 rounded-lg shadow hover:bg-green-700 transition">List</button>
                            <% } %>
                            <button onclick="editCoupon(
                                '<%= coupon._id %>', 
                                '<%= coupon.name %>', 
                                '<%= coupon.expireOn.toISOString().split("T")[0] %>', 
                                '<%= coupon.offerPrice %>', 
                                '<%= coupon.minimumPrice %>', 
                                '<%= coupon.maxDiscount %>',
                                <%= coupon.isList %>
                            )" class="bg-blue-500 text-white px-4 py-2 rounded-lg shadow hover:bg-blue-700 transition">Edit</button>
                            <button onclick="confirmDeleteCoupon('<%= coupon._id %>')" class="bg-red-500 text-white px-4 py-2 rounded-lg shadow hover:bg-red-700 transition">Delete</button>
                        </td>
                    </tr>
                <% }) %>
            </tbody>
        </table>
    </div>

    <div class="mt-4 flex justify-center space-x-2">
        <% if (page > 1) { %>
            <a href="/admin/coupon?page=<%= page - 1 %>" class="bg-gray-300 text-gray-700 px-4 py-2 rounded hover:bg-gray-400 transition">Previous</a>
        <% } %>
        <% for (let i = 1; i <= totalPages; i++) { %>
            <a href="/admin/coupon?page=<%= i %>" class="px-4 py-2 rounded <%= page === i ? 'bg-blue-500 text-white' : 'bg-gray-300 text-gray-700 hover:bg-gray-400 transition' %>"><%= i %></a>
        <% } %>
        <% if (page < totalPages) { %>
            <a href="/admin/coupon?page=<%= page + 1 %>" class="bg-gray-300 text-gray-700 px-4 py-2 rounded hover:bg-gray-400 transition">Next</a>
        <% } %>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    function addCoupon() {
        Swal.fire({
            title: "Add New Coupon",
            html: `
                <form id="coupon-form">
                    <div class="mb-4">
                        <label for="name" class="block text-sm font-medium text-gray-700">Coupon Name</label>
                        <input id="name" name="name" class="mt-1 p-2 border rounded w-full" placeholder="Coupon Name" required>
                    </div>
                    <div class="mb-4">
                        <label for="expireOn" class="block text-sm font-medium text-gray-700">Expire On</label>
                        <input id="expireOn" name="expireOn" type="date" class="mt-1 p-2 border rounded w-full" required>
                    </div>
                    <div class="mb-4">
                        <label for="offerPrice" class="block text-sm font-medium text-gray-700">Offer Percentage (%)</label>
                        <input id="offerPrice" name="offerPrice" type="number" min="0" max="100" step="5" class="mt-1 p-2 border rounded w-full" placeholder="Offer Percentage" required>
                    </div>
                    <div class="mb-4">
                        <label for="minimumPrice" class="block text-sm font-medium text-gray-700">Minimum Price (%)</label>
                        <input id="minimumPrice" name="minimumPrice" type="number" min="0" max="100" step="5" class="mt-1 p-2 border rounded w-full" placeholder="Minimum Price Percentage" required>
                    </div>
                    <div class="mb-4">
                        <label for="maxDiscount" class="block text-sm font-medium text-gray-700">Maximum Discount (%)</label>
                        <input id="maxDiscount" name="maxDiscount" type="number" min="0" max="100" step="5" class="mt-1 p-2 border rounded w-full" placeholder="Maximum Discount Percentage" required>
                    </div>
                    <div class="mb-4 flex items-center">
                        <input id="isList" name="isList" type="checkbox" class="mr-2 border rounded" checked>
                        <label for="isList" class="block text-sm font-medium text-gray-700">List this coupon</label>
                    </div>
                </form>
            `,
            showCancelButton: true,
            confirmButtonText: 'Add',
            preConfirm: () => {
                const name = document.getElementById('name').value.trim();
                const expireOn = document.getElementById('expireOn').value;
                const offerPrice = parseFloat(document.getElementById('offerPrice').value);
                const minimumPrice = parseFloat(document.getElementById('minimumPrice').value);
                const maxDiscount = parseFloat(document.getElementById('maxDiscount').value);
                const isList = document.getElementById('isList').checked;

                if (!name || !expireOn || isNaN(offerPrice) || isNaN(minimumPrice) || isNaN(maxDiscount)) {
                    Swal.showValidationMessage('All fields are required');
                    return false;
                }

                if (offerPrice % 5 !== 0 || minimumPrice % 5 !== 0 || maxDiscount % 5 !== 0) {
                    Swal.showValidationMessage('Percentages must be multiples of 5');
                    return false;
                }

                if (offerPrice < 0 || offerPrice > 100 || minimumPrice < 0 || minimumPrice > 100 || maxDiscount < 0 || maxDiscount > 100) {
                    Swal.showValidationMessage('All percentage fields must be between 0 and 100');
                    return false;
                }

                if (maxDiscount < offerPrice) {
                    Swal.showValidationMessage('Maximum Discount must be â‰¥ Offer Percentage');
                    return false;
                }

                return { name, expireOn, offerPrice, minimumPrice, maxDiscount, isList };
            }
        }).then((result) => {
            if (result.isConfirmed) {
                const couponData = result.value;
                fetch('/admin/add-coupon', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(couponData)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire('Success', 'Coupon added successfully', 'success').then(() => {
                            location.reload();
                        });
                    } else {
                        Swal.fire('Error', data.message || 'Failed to add coupon', 'error');
                    }
                })
                .catch(error => {
                    Swal.fire('Error', 'An error occurred while adding the coupon', 'error');
                });
            }
        });
    }

    function editCoupon(couponId, name, expireOn, offerPrice, minimumPrice, maxDiscount, isList) {
        Swal.fire({
            title: "Edit Coupon",
            html: `
                <form id="edit-coupon-form">
                    <div class="mb-4">
                        <label for="edit-name" class="block text-sm font-medium text-gray-700">Coupon Name</label>
                        <input id="edit-name" name="name" class="mt-1 p-2 border rounded w-full" value="${name}" required>
                    </div>
                    <div class="mb-4">
                        <label for="edit-expire-on" class="block text-sm font-medium text-gray-700">Expire On</label>
                        <input id="edit-expire-on" name="expireOn" type="date" class="mt-1 p-2 border rounded w-full" value="${expireOn}" required>
                    </div>
                    <div class="mb-4">
                        <label for="edit-offer-price" class="block text-sm font-medium text-gray-700">Offer Percentage (%)</label>
                        <input id="edit-offer-price" name="offerPrice" type="number" min="0" max="100" step="5" class="mt-1 p-2 border rounded w-full" value="${offerPrice}" required>
                    </div>
                    <div class="mb-4">
                        <label for="edit-minimum-price" class="block text-sm font-medium text-gray-700">Minimum Price (%)</label>
                        <input id="edit-minimum-price" name="minimumPrice" type="number" min="0" max="100" step="5" class="mt-1 p-2 border rounded w-full" value="${minimumPrice}" required>
                    </div>
                    <div class="mb-4">
                        <label for="edit-max-discount" class="block text-sm font-medium text-gray-700">Maximum Discount (%)</label>
                        <input id="edit-max-discount" name="maxDiscount" type="number" min="0" max="100" step="5" class="mt-1 p-2 border rounded w-full" value="${maxDiscount}" required>
                    </div>
                    <div class="mb-4 flex items-center">
                        <input id="edit-is-list" name="isList" type="checkbox" class="mr-2 border rounded" ${isList ? 'checked' : ''}>
                        <label for="edit-is-list" class="block text-sm font-medium text-gray-700">List this coupon</label>
                    </div>
                </form>
            `,
            showCancelButton: true,
            confirmButtonText: 'Save',
            preConfirm: () => {
                const name = document.getElementById('edit-name').value.trim();
                const expireOn = document.getElementById('edit-expire-on').value;
                const offerPrice = parseFloat(document.getElementById('edit-offer-price').value);
                const minimumPrice = parseFloat(document.getElementById('edit-minimum-price').value);
                const maxDiscount = parseFloat(document.getElementById('edit-max-discount').value);
                const isList = document.getElementById('edit-is-list').checked;

                if (!name || !expireOn || isNaN(offerPrice) || isNaN(minimumPrice) || isNaN(maxDiscount)) {
                    Swal.showValidationMessage('All fields are required');
                    return false;
                }

               

                if (offerPrice < 0 || offerPrice > 100 || minimumPrice < 0 || minimumPrice > 100 || maxDiscount < 0 || maxDiscount > 100) {
                    Swal.showValidationMessage('All percentage fields must be between 0 and 100');
                    return false;
                }

                if (maxDiscount < offerPrice) {
                    Swal.showValidationMessage('Maximum Discount must be â‰¥ Offer Percentage');
                    return false;
                }

                return { name, expireOn, offerPrice, minimumPrice, maxDiscount, isList };
            }
        }).then((result) => {
            if (result.isConfirmed) {
                const couponData = result.value;
                fetch(`/admin/edit-coupon/${couponId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(couponData)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire('Success', 'Coupon updated successfully', 'success').then(() => {
                            location.reload();
                        });
                    } else {
                        Swal.fire('Error', data.message || 'Failed to update coupon', 'error');
                    }
                })
                .catch(error => {
                    Swal.fire('Error', 'An error occurred while updating the coupon', 'error');
                });
            }
        });
    }

    function confirmUnlistCoupon(couponId) {
        Swal.fire({
            title: 'Unlist Coupon?',
            text: "The coupon will be hidden from users but not deleted.",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, unlist it!'
        }).then((result) => {
            if (result.isConfirmed) {
                fetch(`/admin/unlist-coupon/${couponId}`, {
                    method: 'POST'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire('Unlisted!', 'Coupon has been unlisted.', 'success').then(() => {
                            location.reload();
                        });
                    } else {
                        Swal.fire('Error', data.message || 'Failed to unlist coupon', 'error');
                    }
                })
                .catch(error => {
                    Swal.fire('Error', 'An error occurred while unlisting the coupon', 'error');
                });
            }
        });
    }

    function confirmListCoupon(couponId) {
        Swal.fire({
            title: 'List Coupon?',
            text: "The coupon will be visible to users.",
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, list it!'
        }).then((result) => {
            if (result.isConfirmed) {
                fetch(`/admin/list-coupon/${couponId}`, {
                    method: 'POST'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire('Listed!', 'Coupon has been listed.', 'success').then(() => {
                            location.reload();
                        });
                    } else {
                        Swal.fire('Error', data.message || 'Failed to list coupon', 'error');
                    }
                })
                .catch(error => {
                    Swal.fire('Error', 'An error occurred while listing the coupon', 'error');
                });
            }
        });
    }

    function confirmDeleteCoupon(couponId) {
        Swal.fire({
            title: 'Delete Coupon?',
            text: "This will permanently remove the coupon!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.isConfirmed) {
                fetch(`/admin/delete-coupon/${couponId}`, {
                    method: 'DELETE'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire('Deleted!', 'Coupon has been deleted.', 'success').then(() => {
                            location.reload();
                        });
                    } else {
                        Swal.fire('Error', data.message || 'Failed to delete coupon', 'error');
                    }
                })
                .catch(error => {
                    Swal.fire('Error', 'An error occurred while deleting the coupon', 'error');
                });
            }
        });
    }
</script>
</body>
</html>