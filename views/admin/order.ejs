<%- include('../../views/partials/admin/header.ejs') %>
<div class="flex-1 p-6">
    <div class="flex justify-between items-center mb-4">
        <h2 class="text-3xl font-semibold">Orders</h2>
    </div>

    <!-- Search and Filter Form -->
    <div class="flex justify-center items-center min-h-[10vh] mb-4">
        <form id="filterForm" action="/admin/orders" method="GET" class="relative w-full max-w-lg">
            <div class="flex items-center bg-white border border-gray-300 rounded-full shadow-sm px-4 py-2 focus-within:ring-2 focus-within:ring-gray-700">
                <input 
                    type="text" 
                    name="search" 
                    placeholder="Search Orders..." 
                    value="<%= search %>" 
                    class="w-full bg-transparent outline-none text-gray-700 placeholder-gray-400"
                >
                <button 
                    type="submit" 
                    class="text-gray-700 hover:text-gray-900 transition duration-300"
                >
                    üîç
                </button>
            </div>

            <!-- Filter Section -->
            <div class="mt-4">
                <label for="status" class="block text-sm font-medium text-gray-700">Filter by Status</label>
                <select name="status" id="status" class="mt-1 p-2 border rounded w-full">
                    <option value="">All Statuses</option>
                    <option value="Pending" <%= selectedStatus === 'Pending' ? 'selected' : '' %>>Pending</option>
                    <option value="Shipped" <%= selectedStatus === 'Shipped' ? 'selected' : '' %>>Shipped</option>
                    <option value="Delivered" <%= selectedStatus === 'Delivered' ? 'selected' : '' %>>Delivered</option>
                    <option value="Cancelled" <%= selectedStatus === 'Cancelled' ? 'selected' : '' %>>Cancelled</option>
                    <option value="Return Request" <%= selectedStatus === 'Return Request' ? 'selected' : '' %>>Return Request</option>
                    <option value="Returned" <%= selectedStatus === 'Returned' ? 'selected' : '' %>>Returned</option>
                                        <option value="Return Request" <%= orders.se === 'Return Request' ? 'selected' : '' %>>Return Request</option>

                </select>
                <button 
                    type="button" 
                    id="filterButton" 
                    class="mt-2 bg-blue-500 text-white px-4 py-2 rounded shadow-md hover:bg-blue-600 transition-all w-full"
                >
                    Apply Filter
                </button>
            </div>

            <!-- Sort Section -->
            <div class="mt-4">
                <label for="sortBy" class="block text-sm font-medium text-gray-700">Sort By</label>
                <select name="sortBy" id="sortBy" class="mt-1 p-2 border rounded w-full">
                    <option value="">Default</option>
                    <option value="orderId" <%= sortBy === 'orderId' ? 'selected' : '' %>>Order ID</option>
                    <option value="customer" <%= sortBy === 'customer' ? 'selected' : '' %>>Customer</option>
                    <option value="date" <%= sortBy === 'date' ? 'selected' : '' %>>Date</option>
                </select>
                <button 
                    type="button" 
                    id="sortButton" 
                    class="mt-2 bg-green-500 text-white px-4 py-2 rounded shadow-md hover:bg-green-600 transition-all w-full"
                >
                    Apply Sort
                </button>
            </div>
        </form>
    </div>

    <!-- Total Orders -->
    <div class="bg-blue-100 text-blue-800 font-semibold px-4 py-2 rounded-lg shadow-md w-fit mb-4" style="margin-left: 7.5cm;">
        Total Orders: <%= totalOrders %>
    </div>

    <!-- Orders Table -->
    <div class="bg-white p-4 shadow rounded">
        <table class="w-[80%] ml-auto text-left border-collapse shadow-md rounded-lg overflow-hidden">
            <thead class="bg-gray-800 text-white">
                <tr>
                    <th class="p-3">#</th>
                    <th class="p-3">Order ID</th>
                    <th class="p-3">Customer</th>
                    <th class="p-3">Products</th>
                    <th class="p-3">Quantity</th>
                    <th class="p-3">Date</th>
                    <th class="p-3">Status</th>
                    <th class="p-3">Actions</th>
                </tr>
            </thead>
            <tbody>
                <% let visibleIndex = 0; %>
                <% orders.forEach((order) => { %>
                    <tr class="border-b hover:bg-gray-100 transition-all duration-300">
                        <td class="p-3"><%= ++visibleIndex %></td>
                        <td class="p-3 font-medium text-gray-700">#<%= order.orderId %></td>
                        <td class="p-3 text-gray-600"><%= order.userId?.name || "Unknown" %></td>
                        <td class="p-3">
                            <% order.orderItems.forEach(item => { %>
                                <%= item.product?.productName || "Product not available" %><br>
                            <% }) %>
                        </td>
                        <td class="p-3">
                            <% order.orderItems.forEach(item => { %>
                                <%= item.quantity %><br>
                            <% }) %>
                        </td>
                        <td class="p-3"><%= new Date(order.createdOn).toLocaleDateString('en-US') %></td>
                        <td class="p-3">
                            <select class="status-select p-2 border rounded" data-orderid="<%= order.orderId %>">
                                <option value="Pending" <%= order.status === 'Pending' ? 'selected' : '' %>>Pending</option>
                                <option value="Shipped" <%= order.status === 'Shipped' ? 'selected' : '' %>>Shipped</option>
                                <option value="Delivered" <%= order.status === 'Delivered' ? 'selected' : '' %>>Delivered</option>
                                <option value="Cancelled" <%= order.status === 'Cancelled' ? 'selected' : '' %>>Cancelled</option>
                                <option value="Return Request" <%= order.status === 'Return Request' ? 'selected' : '' %>>Return Request</option>
                                <option value="Returned" <%= order.status === 'Returned' ? 'selected' : '' %>>Returned</option>
                            </select>
                        </td>
                        <td class="p-3 flex space-x-2 justify-center">
                            <button onclick="viewOrder('<%=order.orderId%>')" class="bg-blue-500 text-white px-4 py-2 rounded-lg shadow-md hover:bg-blue-600 transition-all">View</button>
                            <% if (order.status === 'Return Request') { %>
                                <button class="bg-green-500 text-white px-4 py-2 rounded-lg shadow-md hover:bg-green-600 transition-all" onclick="handleReturnRequest('<%= order._id %>', 'approve')">Approve</button>
                                <button class="bg-red-500 text-white px-4 py-2 rounded-lg shadow-md hover:bg-red-600 transition-all" onclick="handleReturnRequest('<%= order._id %>', 'reject')">Reject</button>
                            <% } %>
                        </td>
                    </tr>
                <% }) %>
            </tbody>
        </table>
    </div>

    <!-- Pagination -->
  <!-- Pagination -->
<div class="mt-4 flex justify-center space-x-2">
    <!-- Previous Button -->
    <% if (page > 1) { %>
        <a href="/admin/orders?search=<%= search %>&status=<%= selectedStatus %>&sortBy=<%= sortBy %>&page=<%= currentPage - 1 %>" 
           class="bg-gray-300 text-gray-700 px-4 py-2 rounded hover:bg-gray-400 transition">
           Previous
        </a>
    <% } else { %>
        <span class="bg-gray-200 text-gray-500 px-4 py-2 rounded cursor-not-allowed">
            Previous
        </span>
    <% } %>

    <!-- Next Button -->
    <% if (page < totalPages) { %>
        <a href="/admin/orders?search=<%= search %>&status=<%= selectedStatus %>&sortBy=<%= sortBy %>&page=<%= page + 1 %>" 
           class="bg-gray-300 text-gray-700 px-4 py-2 rounded hover:bg-gray-400 transition">
           Next
        </a>
    <% } else { %>
        <span class="bg-gray-200 text-gray-500 px-4 py-2 rounded cursor-not-allowed">
            Next
        </span>
    <% } %>
</div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>    
// Handle Return Request
function handleReturnRequest(orderId, action) {
    Swal.fire({
        title: 'Are you sure?',
        text: `You are about to ${action} this return request.`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: `Yes, ${action} it!`
    }).then((result) => {
        if (result.isConfirmed) {
            fetch(`/admin/handle-return-request`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ orderId, action }),
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: data.message,
                    }).then(() => {
                        location.reload();
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: data.message,
                    });
                }
            })
            .catch(error => {
                console.error('Error handling return request:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Server error. Try again later.',
                });
            });
        }
    });
}

// Handle Filter Button
document.getElementById('filterButton').addEventListener('click', function () {
    const form = document.getElementById('filterForm');
    const search = form.search.value;
    const status = form.status.value;
    const sortBy = form.sortBy.value;
    window.location.href = `/admin/orders?search=${search}&status=${status}&sortBy=${sortBy}`;
});

// Handle Sort Button
document.getElementById('sortButton').addEventListener('click', function () {
    const form = document.getElementById('filterForm');
    const search = form.search.value;
    const status = form.status.value;
    const sortBy = form.sortBy.value;
    window.location.href = `/admin/orders?search=${search}&status=${status}&sortBy=${sortBy}`;
});

// Handle Status Update
document.querySelectorAll('.status-select').forEach(select => {
    select.addEventListener('change', function () {
        const orderId = this.getAttribute('data-orderid');
        const newStatus = this.value;

        fetch(`/admin/update-order-status`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ orderId, newStatus }),
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: 'Order status updated successfully!',
                }).then(() => {
                    location.reload();
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to update order status.',
                });
            }
        })
        .catch(error => {
            console.error('Error updating order status:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Server error. Try again later.',
            });
        });
    });
});
function viewOrder(orderId) {
        window.location.href = `/admin/orders/${orderId}`;
    }

    async function handleReturnRequest(orderId, action) {
        try {
            const response = await fetch('/admin/handle-return-request', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ orderId, action }),
            });

            const result = await response.json();

            if (result.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: result.message,
                }).then(() => {
                    location.reload();
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: result.message,
                });
            }
        } catch (error) {
            console.error('Error handling return request:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Server error. Try again later.',
            });
        }
    }
    document.querySelectorAll(".status-select").forEach(select => {
            select.addEventListener("change", function () {
                let orderId = this.getAttribute("data-orderid");
                let newStatus = this.value;

                // Send AJAX request to update status
                fetch(`/admin/update-status`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({ orderId, newStatus })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire({ icon: 'success', title: 'Status updated successfully!', showConfirmButton: false, timer: 1500 })
                        .then(() => location.reload());
                    } else {
                        Swal.fire({ icon: 'error', title: 'Status update failed!', showConfirmButton: false, timer: 1500 })
                        .then(() => location.reload());
                    }
                })
                .catch(error => {
                    console.error("Error updating status:", error);
                });
            });
        });
</script>