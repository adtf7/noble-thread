<%- include('../../views/partials/user/header.ejs') %>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
<style>
    * {
      
        box-sizing: border-box;
        font-family: 'Arial', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    }

    body {
        background-color: #f5f5f5;
        min-height: 100vh;
        display: flex;
        flex-direction: column;
    }

    .dashboard {
        display: flex;
        width: 100%;
        max-width: 1400px;
     
       
        padding: 0 20px;
    }



    .main-content {
        flex: 1;
        background: #fff;
        padding: 30px;
        border-radius: 8px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.08);
        overflow-y: auto;
        width: 100%;
    }

    .order-header {
        border-bottom: 1px solid #e7e7e7;
        padding-bottom: 20px;
        margin-bottom: 20px;
    }

    .order-header h2 {
        font-size: 24px;
        font-weight: 600;
        color: #131921;
        margin-bottom: 10px;
    }

    .order-header p {
        font-size: 14px;
        color: #565959;
        margin: 5px 0;
    }

    .order-info {
        margin-bottom: 20px;
        padding: 20px;
        background: #fafafa;
        border-radius: 8px;
        border: 1px solid #e7e7e7;
    }

    .order-info p {
        font-size: 14px;
        color: #333;
        margin: 8px 0;
    }

    .order-info p strong {
        color: #131921;
    }

    .product-list {
        display: flex;
        flex-direction: column;
        gap: 15px;
        margin-bottom: 20px;
    }

    .product-item {
        display: flex;
        align-items: center;
        gap: 20px;
        background: #fff;
        padding: 15px;
        border: 1px solid #e7e7e7;
        border-radius: 8px;
        transition: box-shadow 0.2s;
    }

    .product-item:hover {
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    .product-item img {
        width: 100px;
        height: 100px;
        object-fit: contain;
        border-radius: 4px;
        background: #f5f5f5;
    }

    .product-item h4 {
        font-size: 16px;
        font-weight: 600;
        color: #131921;
        margin-bottom: 5px;
    }

    .product-item p {
        font-size: 14px;
        color: #565959;
        margin: 5px 0;
    }

    .btn {
        text-decoration: none;
        padding: 10px 20px;
        border-radius: 4px;
        font-size: 14px;
        font-weight: 500;
        transition: background 0.2s, transform 0.1s;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
    }

    .btn-primary {
        background: #ff9900;
        border: 1px solid #f08804;
        color: #111;
    }

    .btn-primary:hover {
        background: #f08804;
        transform: translateY(-1px);
    }

    .btn-cancel {
        background: #fff;
        border: 1px solid #d11507;
        color: #d11507;
    }

    .btn-cancel:hover {
        background: #d11507;
        color: #fff;
    }

    .btn-return {
        background: #fff;
        border: 1px solid #007185;
        color: #007185;
    }

    .btn-return:hover {
        background: #007185;
        color: #fff;
    }

    .order-status {
        display: inline-block;
        padding: 6px 12px;
        border-radius: 16px;
        font-size: 13px;
        font-weight: 600;
        color: #fff;
        text-transform: capitalize;
        
    }

    .order-status.pending {
        background: #f0ad4e;
    }

    .order-status.processing {
        background: #ec971f;
    }

    .order-status.shipped {
        background: #007185;
    }

    .order-status.delivered {
        background: #00a758;
    }

    .order-status.return-request {
        background: #ff9800;
    }

    .order-status.returned {
        background: #a04b4b;
    }

    .order-status.cancelled {
        background: #888;
    }

    .order-status.failed {
        background: #d11507;
    }

    .order-footer {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding-top: 20px;
        border-top: 1px solid #e7e7e7;
    }

    .order-footer span {
        font-size: 16px;
        font-weight: 600;
        color: #131921;
    }

    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        justify-content: center;
        align-items: center;
    }

    .modal-content {
        background: #fff;
        padding: 30px;
        border-radius: 8px;
        width: 90%;
        max-width: 500px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        animation: fadeIn 0.3s ease-in-out;
    }

    .close-modal {
        position: absolute;
        top: 15px;
        right: 15px;
        font-size: 20px;
        cursor: pointer;
        color: #565959;
    }

    .modal-content h2 {
        font-size: 20px;
        font-weight: 600;
        color: #131921;
        margin-bottom: 20px;
    }

    .modal-content form {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .modal-content form label {
        font-size: 14px;
        font-weight: 500;
        color: #131921;
        text-align: left;
    }

    .modal-content form textarea {
        width: 100%;
        padding: 10px;
        border: 1px solid #d5d9d9;
        border-radius: 4px;
        resize: vertical;
        font-size: 14px;
        color: #333;
    }

    .modal-content form button {
        background: #ff9900;
        border: 1px solid #f08804;
        color: #111;
        padding: 10px;
        border-radius: 4px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
    }

    .modal-content form button:hover {
        background: #f08804;
    }

    .swal2-popup-custom {
        border-radius: 8px;
        padding: 20px;
    }

    .swal2-confirm-custom {
        background: #ff9900 !important;
        border: 1px solid #f08804 !important;
        border-radius: 4px;
        font-size: 14px;
        padding: 10px 20px;
        color: #111 !important;
    }

    .swal2-cancel-custom {
        background: #fff !important;
        border: 1px solid #d11507 !important;
        color: #d11507 !important;
        border-radius: 4px;
        font-size: 14px;
        padding: 10px 20px;
    }

    .swal2-confirm-custom:hover {
        background: #f08804 !important;
    }

    .swal2-cancel-custom:hover {
        background: #d11507 !important;
        color: #fff !important;
    }

    @keyframes fadeIn {
        from { opacity: 0; transform: scale(0.95); }
        to { opacity: 1; transform: scale(1); }
    }

    @media (max-width: 768px) {
      
      
        .main-content {
            padding: 15px;
        }
        .product-item {
            flex-direction: column;
            align-items: flex-start;
        }
        .product-item img {
            width: 80px;
            height: 80px;
        }
    }
</style>

<body>
    <%- include('../../views/partials/user/aside.ejs') %>
    <div class="dashboard">
        <div class="main-content">
            <% if (order) { %>
                <div class="order-header">
                    <h2>Order Details</h2>
                    <p><strong>Order ID:</strong> <%= order.orderId %></p>
                    <p><strong>Order Date:</strong> <%= new Date(order.createdOn).toLocaleDateString() %></p>
                </div>
                <div class="order-info">
                    <p><strong>Shipping Address:</strong>
                        <% if (order.address && order.address.address.length > 0) { %>
                            <% order.address.address.forEach(address => { %>
                                <%= address.name %>, <%= address.city %>, <%= address.pincode %><br>
                                <%= address.state %>, - <%= address.phone %>
                            <% }); %>
                        <% } else { %>
                            <span>No address available.</span>
                        <% } %>
                    </p>
                    <p><strong>Payment Method:</strong> <%= order.shoppingMethod %></p>
                    <p><strong>Total Amount:</strong> ₹<%= order.totalAmount.toFixed(2) %></p>
                    <p><strong>Discount:</strong> ₹<%= (order.totalAmount - order.finalAmount).toFixed(2) %></p>
                    <p><strong>Final Amount:</strong> ₹<%= order.finalAmount.toFixed(2) %></p>
                    <% 
                        let isFailed = order.status === 'Failed'; 
                        order.orderItems.forEach(item => {
                            if (item.status === 'Failed') isFailed = true;
                        });
                        if (isFailed) { 
                    %>
                        <button class="btn btn-primary retry-btn" onclick="retryPayment('<%= order._id %>')">Retry Payment</button>
                    <% } %>
                </div>

                <h3>Items Ordered</h3>
                <% if (order.orderItems && order.orderItems.length > 0) { %>
                    <div class="product-list">
                        <% order.orderItems.forEach(item => { %>
                            <div class="product-item">
                                <% if (item.product) { %>
                                    <img src="<%= item.product.productImage ? item.product.productImage[0] : '/images/default.jpg' %>" alt="Product Image">
                                    <div>
                                        <h4><%= item.product.productName || 'Product not available' %></h4>
                                        <p>Price: ₹<%= item.price.toFixed(2) %> | Quantity: <%= item.quantity %></p>
                                        <p><strong>Status:</strong> 
                                            <span class="order-status <%= item.status.toLowerCase().replace(' ', '-') %>">
                                                <%= item.status %>
                                            </span>
                                        </p>
                                        <% if (item.status === 'Pending' || item.status === 'Processing') { %>
                                            <button class="btn btn-cancel" onclick="cancelItem('<%= order._id %>', '<%= item._id %>')">Cancel Item</button>
                                        <% } %>
                                        <% if (item.status === 'Delivered') { %>
                                            <button class="btn btn-return" onclick="openReturnModal('<%= order._id %>', '<%= item._id %>')">Return Item</button>
                                        <% } %>
                                    </div>
                                <% } else { %>
                                    <p>Product details not available.</p>
                                <% } %>
                            </div>
                        <% }); %>
                    </div>
                <% } else { %>
                    <p>No order items found.</p>
                <% } %>
                <div class="order-footer">
                    <span><strong>Total:</strong> ₹<%= order.finalAmount.toFixed(2) %></span>
                    <div>
                        <% if (order.status === 'Delivered') { %>
                            <a href="/download-invoice/<%= order._id %>" class="btn btn-primary">Download Invoice</a>
                        <% } %>
                        <a href="/order-history" class="btn btn-primary">Back to Orders</a>
                    </div>
                </div>
            <% } else { %>
                <p>Order not found.</p>
            <% } %>
        </div>
    </div>

    <!-- Return Item Modal -->
    <div id="returnOrderModal" class="modal">
        <div class="modal-content">
            <span class="close-modal" onclick="closeReturnModal()">×</span>
            <h2>Return Item</h2>
            <form id="returnOrderForm" action="/return-item" method="POST">
                <input type="hidden" name="orderId" id="returnOrderId">
                <input type="hidden" name="itemId" id="returnItemId">
                <div>
                    <label for="returnReason">Reason for Return:</label>
                    <textarea id="returnReason" name="returnReason" rows="4" required></textarea>
                </div>
                <button type="submit" class="btn">Submit Return Request</button>
            </form>
        </div>
    </div>

    <%- include('../../views/partials/user/footer.ejs') %>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script>
        function openReturnModal(orderId, itemId) {
            document.getElementById('returnOrderId').value = orderId;
            document.getElementById('returnItemId').value = itemId;
            document.getElementById('returnOrderModal').style.display = 'flex';
        }

        function closeReturnModal() {
            document.getElementById('returnOrderModal').style.display = 'none';
        }

        document.getElementById('returnOrderForm').addEventListener('submit', async function(event) {
            event.preventDefault();
            const orderId = document.getElementById('returnOrderId').value;
            const itemId = document.getElementById('returnItemId').value;
            const returnReason = document.getElementById('returnReason').value.trim();

            if (!returnReason) {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Please provide a reason for the return.',
                    customClass: {
                        popup: 'swal2-popup-custom',
                        confirmButton: 'swal2-confirm-custom'
                    }
                });
                return;
            }

            try {
                const response = await fetch('/return-order', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ orderId, itemId, returnReason }),
                });

                const result = await response.json();

                if (result.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: result.message,
                        customClass: {
                            popup: 'swal2-popup-custom',
                            confirmButton: 'swal2-confirm-custom'
                        }
                    }).then(() => {
                        closeReturnModal();
                        location.reload();
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: result.message,
                        customClass: {
                            popup: 'swal2-popup-custom',
                            confirmButton: 'swal2-confirm-custom'
                        }
                    });
                }
            } catch (error) {
                console.error('Error submitting return request:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Server error. Try again later.',
                    customClass: {
                        popup: 'swal2-popup-custom',
                        confirmButton: 'swal2-confirm-custom'
                    }
                });
            }
        });

        function cancelItem(orderId, itemId) {
            Swal.fire({
                title: "Cancel Item",
                html: `
                    <div style="text-align: left;">
                        <label for="cancelReason" style="display: block; font-size: 16px; font-weight: 500; margin-bottom: 5px;">
                            Select a reason:
                        </label>
                        <select id="cancelReason" class="swal2-select" style="
                            width: 100%; 
                            padding: 10px; 
                            font-size: 15px; 
                            border-radius: 4px; 
                            border: 1px solid #d5d9d9; 
                            outline: none; 
                            background: #fff;
                            cursor: pointer;
                        ">
                            <option value="" disabled selected>-- Select Reason --</option>
                            <option value="Changed my mind">Changed my mind</option>
                            <option value="Found a better price">Found a better price</option>
                            <option value="Ordered by mistake">Ordered by mistake</option>
                            <option value="Item is not needed">Item is not needed</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>
                `,
                showCancelButton: true,
                confirmButtonText: "Submit",
                cancelButtonText: "Close",
                customClass: {
                    popup: 'swal2-popup-custom',
                    confirmButton: 'swal2-confirm-custom',
                    cancelButton: 'swal2-cancel-custom'
                },
                preConfirm: () => {
                    const reason = document.getElementById("cancelReason").value;
                    if (!reason) {
                        Swal.showValidationMessage("Please select a reason!");
                    }
                    return reason;
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    const reason = result.value;

                    fetch(`/cancel-order`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ orderId, itemId, reason }),
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire({
                                title: "Success!",
                                text: "Item canceled successfully.",
                                icon: "success",
                                confirmButtonText: "OK",
                                customClass: { 
                                    popup: 'swal2-popup-custom',
                                    confirmButton: 'swal2-confirm-custom' 
                                }
                            }).then(() => {
                                location.reload();
                            });
                        } else {
                            Swal.fire({
                                title: "Error!",
                                text: data.message,
                                icon: "error",
                                customClass: {
                                    popup: 'swal2-popup-custom',
                                    confirmButton: 'swal2-confirm-custom'
                                }
                            });
                        }
                    })
                    .catch(error => {
                        Swal.fire({
                            title: "Error!",
                            text: "Something went wrong. Try again later.",
                            icon: "error",
                            customClass: {
                                popup: 'swal2-popup-custom',
                                confirmButton: 'swal2-confirm-custom'
                            }
                        });
                    });
                }
            });
        }

        async function retryPayment(orderId) {
            const result = await Swal.fire({
                title: 'Retry Payment',
                text: 'Do you want to retry payment for this order?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'Yes, Retry',
                cancelButtonText: 'Cancel',
                customClass: {
                    popup: 'swal2-popup-custom',
                    confirmButton: 'swal2-confirm-custom',
                    cancelButton: 'swal2-cancel-custom'
                }
            });

            if (result.isConfirmed) {
                try {
                    const response = await fetch('/retry-razorpay-order', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ orderId })
                    });
                    const data = await response.json();

                    if (!data.success) {
                        Swal.fire({
                            title: 'Error',
                            text: data.message || 'Could not initiate payment.',
                            icon: 'error',
                            customClass: {
                                popup: 'swal2-popup-custom',
                                confirmButton: 'swal2-confirm-custom'
                            }
                        });
                        return;
                    }

                    const options = {
                        key: data.razorpayKey,
                        amount: data.razorpayOrder.amount,
                        currency: data.razorpayOrder.currency,
                        order_id: data.razorpayOrder.id,
                        name: 'Noble Thread',
                        description: 'Retry Payment',
                        handler: async function (response) {
                            const verifyRes = await fetch('/reverify-payment', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({
                                    razorpay_payment_id: response.razorpay_payment_id,
                                    razorpay_order_id: response.razorpay_order_id,
                                    razorpay_signature: response.razorpay_signature,
                                    amount: data.razorpayOrder.amount / 100
                                })
                            });
                            const verifyData = await verifyRes.json();
                            if (verifyData.success) {
                                Swal.fire({
                                    title: 'Success',
                                    text: 'Payment successful! Order updated.',
                                    icon: 'success',
                                    customClass: {
                                        popup: 'swal2-popup-custom',
                                        confirmButton: 'swal2-confirm-custom'
                                    }
                                }).then(() => location.reload());
                            } else {
                                Swal.fire({
                                    title: 'Error',
                                    text: verifyData.message || 'Payment verification failed.',
                                    icon: 'error',
                                    customClass: {
                                        popup: 'swal2-popup-custom',
                                        confirmButton: 'swal2-confirm-custom'
                                    }
                                });
                            }
                        },
                        modal: {
                            ondismiss: function () {
                                Swal.fire({
                                    title: 'Info',
                                    text: 'Payment was cancelled.',
                                    icon: 'info',
                                    customClass: {
                                        popup: 'swal2-popup-custom',
                                        confirmButton: 'swal2-confirm-custom'
                                    }
                                });
                            }
                        }
                    };

                    const rzp = new Razorpay(options);
                    rzp.open();
                } catch (err) {
                    Swal.fire({
                        title: 'Error',
                        text: 'Something went wrong. Please try again.',
                        icon: 'error',
                        customClass: {
                            popup: 'swal2-popup-custom',
                            confirmButton: 'swal2-confirm-custom'
                        }
                    });
                }
            }
        }
    </script>
</body>
</html>