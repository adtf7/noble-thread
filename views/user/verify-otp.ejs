<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Verify OTP</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
    <style>
        body {
            background-color: #f4f4f4;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }
        .container {
            background-color: #d3d6db;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            width: 350px;
            text-align: center;
            position: relative;
        }
        .error-message {
            color: red;
            margin-bottom: 15px;
        }
        .progress-bar {
            width: 100%;
            height: 5px;
            background-color: #ccc;
            margin-top: 10px;
            position: relative;
        }
        .progress-fill {
            height: 100%;
            width: 0;
            background-color: #007bff;
            transition: width 60s linear;
        }
        .timer {
            margin-top: 15px;
            font-size: 14px;
        }
        .resend-btn {
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h2>Verify OTP</h2>
        <% if (message) { %>
            <p class="error-message"><%= message %></p>
        <% } %>
        <form id="otpForm" action="/verify-otp" method="POST" onsubmit="return validateotpform()">
            <div class="form-group">
                <label for="otp">Enter OTP:</label>
                <input type="text" id="enterotp" name="enterotp" class="form-control" maxlength="6" placeholder="Enter 6-digit OTP" required>
                <small class="error-message" id="otp-error" style="display: none;"></small>
            </div>
            <div class="progress-bar">
                <div class="progress-fill" id="progress-fill"></div>
            </div>
            <div class="timer" id="timer">Resend OTP in 1:00</div>
            <button type="submit" class="btn btn-dark btn-block mt-3" id="verify-btn" disabled>Verify</button>
        </form>
        <button class="btn btn-secondary btn-block resend-btn" id="resend-btn" disabled>Resend OTP</button>
    </div>
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.js"></script>
    <script>
        let timer = 60;
        let countdown;
        let isVerifying = false;
        let isResending = false;
        const OTP_LENGTH = 6;

        const timerElement = document.getElementById('timer');
        const resendButton = document.getElementById('resend-btn');
        const verifyButton = document.getElementById('verify-btn');
        const otpInput = document.getElementById('enterotp');
        const otpError = document.getElementById('otp-error');
        const progressFill = document.getElementById('progress-fill');

        // Debounce function to prevent multiple rapid clicks
        function debounce(func, wait) {
            let timeout;
            return function (...args) {
                clearTimeout(timeout);
                timeout = setTimeout(() => func.apply(this, args), wait);
            };
        }

        // Validate OTP input
        function validateOTP(otp) {
            const otpRegex = /^\d{6}$/;
            if (!otp) {
                otpError.textContent = 'OTP is required';
                otpError.style.display = 'block';
                otpInput.classList.add('is-invalid');
                verifyButton.disabled = true;
                return false;
            }
            if (!otpRegex.test(otp)) {
                otpError.textContent = `OTP must be a ${OTP_LENGTH}-digit number`;
                otpError.style.display = 'block';
                otpInput.classList.add('is-invalid');
                verifyButton.disabled = true;
                return false;
            }
            otpError.textContent = '';
            otpError.style.display = 'none';
            otpInput.classList.remove('is-invalid');
            verifyButton.disabled = false;
            return true;
        }

        // Start countdown timer
        function startCountdown() {
            console.log('Starting countdown timer');
            if (!timerElement || !progressFill || !resendButton) {
                console.error('DOM elements missing:', { timerElement, progressFill, resendButton });
                return;
            }
            timer = 60; // Reset timer
            timerElement.textContent = `Resend OTP in 1:00`;
            progressFill.style.width = '100%'; // Start at full width
            progressFill.style.transition = 'width 60s linear'; // Ensure transition is set

            // Clear any existing interval
            if (countdown) {
                clearInterval(countdown);
            }

            countdown = setInterval(() => {
                timer--;
                const minutes = Math.floor(timer / 60);
                const seconds = timer % 60;
                timerElement.textContent = `Resend OTP in ${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
                console.log(`Timer: ${timer} seconds remaining`);

                if (timer <= 0) {
                    clearInterval(countdown);
                    timerElement.textContent = '';
                    resendButton.disabled = false;
                    progressFill.style.transition = 'none'; // Stop transition
                    progressFill.style.width = '0%';
                    console.log('Timer finished, resend button enabled');
                }
            }, 1000);
        }

        // Real-time input validation
        otpInput.addEventListener('input', () => {
            const otp = otpInput.value.trim();
            validateOTP(otp);
        });

        // Form submission
        function validateotpform() {
            if (isVerifying) {
                console.log('Verification in progress, skipping');
                return false;
            }
            const otp = otpInput.value.trim();
            if (!validateOTP(otp)) {
                return false;
            }

            isVerifying = true;
            verifyButton.disabled = true;
            console.log('Sending OTP:', otp);

            $.ajax({
                type: 'POST',
                url: '/verify-otp',
                data: { enterotp: otp },
                dataType: 'json',
                statusCode: {
                    400: function (response) {
                        const data = response.responseJSON || { message: 'Invalid request' };
                        otpError.textContent = data.message || 'Invalid OTP';
                        otpError.style.display = 'block';
                        otpInput.classList.add('is-invalid');
                        Swal.fire({
                            icon: 'error',
                            title: 'Invalid OTP',
                            text: data.message || 'The OTP you entered is incorrect'
                        });
                    },
                    500: function () {
                        otpError.textContent = 'An error occurred while verifying the OTP';
                        otpError.style.display = 'block';
                        otpInput.classList.add('is-invalid');
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'An error occurred while verifying the OTP'
                        });
                    }
                },
                success: function (response) {
                    console.log('Received response:', response);
                    if (response.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'OTP Verified!',
                            showConfirmButton: false,
                            timer: 1500
                        }).then(() => {
                            window.location.href = response.redirectUrl || '/';
                        });
                    } else {
                        otpError.textContent = response.message || 'Invalid OTP';
                        otpError.style.display = 'block';
                        otpInput.classList.add('is-invalid');
                        Swal.fire({
                            icon: 'error',
                            title: 'Invalid OTP',
                            text: response.message || 'The OTP you entered is incorrect'
                        });
                    }
                },
                error: function (xhr, status, error) {
                    console.error('AJAX error:', status, error, xhr.responseText);
                    otpError.textContent = 'Failed to connect to the server. Please try again.';
                    otpError.style.display = 'block';
                    otpInput.classList.add('is-invalid');
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Failed to connect to the server. Please try again.'
                    });
                },
                complete: function () {
                    isVerifying = false;
                    verifyButton.disabled = !validateOTP(otpInput.value.trim());
                }
            });

            return false;
        }

        // Resend OTP
        resendButton.addEventListener('click', debounce(() => {
            if (isResending) {
                console.log('Resend in progress, skipping');
                return;
            }
            isResending = true;
            resendButton.disabled = true;
            console.log('Resending OTP');
            $.ajax({
                type: 'POST',
                url: '/resend-otp',
                dataType: 'json',
                success: function (response) {
                    console.log('Resend response:', response);
                    if (response.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'OTP Resent!',
                            text: 'A new OTP has been sent to your email.',
                            showConfirmButton: false,
                            timer: 1500
                        });
                        otpInput.value = '';
                        otpError.textContent = '';
                        otpError.style.display = 'none';
                        otpInput.classList.remove('is-invalid');
                        verifyButton.disabled = true;
                        startCountdown(); // Reset and start timer
                    } else {
                        otpError.textContent = response.message || 'Failed to resend OTP';
                        otpError.style.display = 'block';
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: response.message || 'Failed to resend OTP'
                        });
                        resendButton.disabled = false;
                    }
                },
                error: function (xhr, status, error) {
                    console.error('Resend AJAX error:', status, error, xhr.responseText);
                    otpError.textContent = 'Failed to resend OTP. Please try again.';
                    otpError.style.display = 'block';
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Failed to resend OTP. Please try again.'
                    });
                    resendButton.disabled = false;
                },
                complete: function () {
                    isResending = false;
                }
            });
        }, 300));

        // Initialize countdown
        startCountdown();

        // Validate on page load if input has a value
        if (otpInput.value.trim()) {
            validateOTP(otpInput.value.trim());
        }
    </script>
</body>
</html>
