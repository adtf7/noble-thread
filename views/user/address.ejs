<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Dashboard - Manage Addresses</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <style>
    body {
      font-family: 'Poppins', sans-serif;
      background-color: #f4f5f7;
      color: #444;
      margin: 0;
    }

    .dashboard {
      display: flex;
      height: 100vh;
    }

    .sidebar {
      width: 250px;
      background-color: #ffffff;
      padding: 20px;
      box-shadow: 2px 0 5px rgba(0,0,0,0.1);
      transition: transform 0.3s ease;
      z-index: 10;
    }

    .sidebar.hide {
      transform: translateX(-100%);
    }

    .sidebar.show {
      transform: translateX(0);
    }

    .nav-links {
      list-style: none;
      padding: 0;
      margin-top: 20px;
    }

    .nav-links li {
      margin-bottom: 10px;
    }

    .nav-links a {
      display: block;
      padding: 12px;
      color: #444;
      text-decoration: none;
      border-radius: 8px;
      text-align: center;
      transition: background-color 0.3s ease;
    }

    .nav-links a:hover {
      background-color: #e5e5e7;
    }

    .nav-links a.active {
      background-color: #3182ce;
      color: white;
      font-weight: bold;
    }

     .toggle-btn {
    position: absolute;
    top: 50px;
    left: 20px;
    font-size: 24px;
    background: none;
    border: none;
    cursor: pointer;
    z-index: 30;
    display: none;
  }


    @media (max-width: 1020px) {
      .sidebar {
        position: absolute;
        height: 100%;
        top: 0;
        left: 0;
      }

      .toggle-btn {
        display: block;
      }
    }
  </style>
</head>
<body class="bg-gray-50">

<!-- Toggle Sidebar Button -->
<button class="toggle-btn" onclick="toggleSidebar()">â˜°</button>

<!-- Header Include -->
<%- include('../../views/partials/user/header.ejs') %>

<!-- Dashboard -->
<div class="dashboard">
  <!-- Sidebar -->
  <aside class="sidebar hide" id="sidebar">
    <ul class="nav-links">
      <li><a href="/profile" class="<%= currentPage === 'profile' ? 'active' : '' %>">User Details</a></li>
      <li><a href="/address" class="<%= currentPage === 'addresses' ? 'active' : '' %>">Manage Addresses</a></li>
      <li><a href="/order-history" class="<%= currentPage === 'orders' ? 'active' : '' %>">Order History</a></li>
      <li><a href="/wallet" class="<%= currentPage === 'wallet' ? 'active' : '' %>">Wallet</a></li>
    </ul>
  </aside>

  <!-- Main Content -->
  <main class="flex-1 p-6 overflow-auto">
    <section class="bg-white shadow rounded-lg p-6">
      <div class="flex justify-between items-center mb-4">
        <h2 class="text-2xl font-semibold text-gray-700">Your Addresses</h2>
        <% if (addresscount >= 5) { %>
          <p class="text-yellow-800 bg-yellow-100 border border-yellow-200 p-3 rounded">
            Only 5 addresses can be added. Please delete one to add new.
          </p>
        <% } else { %>
          <button id="addAddressBtn" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded">
            + Add Address
          </button>
        <% } %>
      </div>

      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <% if (addresses && addresses.length) { %>
          <% addresses.forEach(addressItem => { %>
            <div class="border rounded p-4 bg-gray-50">
              <p class="text-lg font-medium text-gray-800"><%= addressItem.address[0].name %></p>
              <p class="text-gray-600"><%= addressItem.address[0].addressType %>, <%= addressItem.address[0].city %></p>
              <p class="text-gray-600">State: <%= addressItem.address[0].state %></p>
              <p class="text-gray-600">Postal Code: <%= addressItem.address[0].pincode %></p>
              <p class="text-gray-600">Landmark: <%= addressItem.address[0].landMark %></p>
              <p class="text-gray-600">Phone: <%= addressItem.address[0].phone %></p>
              <% if(addressItem.country){ %>
                <p class="text-gray-600">Country: <%= addressItem.country %></p>
              <% } %>
              <div class="mt-4 flex space-x-3">
                <button class="bg-yellow-500 hover:bg-yellow-600 text-white px-3 py-1 rounded"
                        onclick="editAddress('<%= addressItem._id %>')">Edit</button>
                <button class="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded"
                        onclick="deleteAddress('<%= addressItem._id %>')">Delete</button>
              </div>
            </div>
          <% }) %>
        <% } else { %>
          <p class="text-gray-600 col-span-1 md:col-span-2">You have no saved addresses.</p>
        <% } %>
      </div>
    </section>
  </main>
</div>

<!-- Footer Include -->
<%- include('../../views/partials/user/footer.ejs') %>

<!-- JavaScript -->
<script>
  const sidebar = document.getElementById("sidebar");

  function toggleSidebar() {
    sidebar.classList.toggle("show");
    sidebar.classList.toggle("hide");
  }

  function handleResize() {
    if (window.innerWidth > 1020) {
      sidebar.classList.remove("hide", "show");
    } else {
      sidebar.classList.add("hide");
      sidebar.classList.remove("show");
    }
  }

  window.addEventListener('load', handleResize);
  window.addEventListener('resize', handleResize);

  function validateAddressFields({ name, addressLine1, city, state, postalCode, Phone, landmark }) {
    if (name.length < 2) return "Name must be at least 2 characters long.";
    if (addressLine1.length < 5) return "Address must be at least 5 characters long.";
    if (city.length < 2) return "City must be at least 2 characters long.";
    if (state.length < 2) return "State must be at least 2 characters long.";
    if (!/^\d+$/.test(postalCode) || postalCode.length < 4 || postalCode.length > 10)
      return "Postal Code must be a number between 4 and 10 digits.";
    if (!/^\d{10}$/.test(Phone)) return "Phone must be a 10-digit number.";
    if (landmark.length < 2) return "Landmark must be at least 2 characters long.";
    return null;
  }

  function addAddress() {
    Swal.fire({
      title: 'Add New Address',
      html: `
        <input type="text" id="name" class="swal2-input" placeholder="Name">
        <input type="text" id="addressLine1" class="swal2-input" placeholder="Address">
        <input type="text" id="city" class="swal2-input" placeholder="City">
        <input type="text" id="state" class="swal2-input" placeholder="State">
        <input type="text" id="postalCode" class="swal2-input" placeholder="Postal Code">
        <input type="text" id="Phone" class="swal2-input" placeholder="Phone">
        <input type="text" id="landmark" class="swal2-input" placeholder="Landmark">
      `,
      confirmButtonText: 'Add',
      preConfirm: () => {
        const name = document.getElementById('name').value.trim();
        const addressLine1 = document.getElementById('addressLine1').value.trim();
        const city = document.getElementById('city').value.trim();
        const state = document.getElementById('state').value.trim();
        const postalCode = document.getElementById('postalCode').value.trim();
        const Phone = document.getElementById('Phone').value.trim();
        const landmark = document.getElementById('landmark').value.trim();

        if (!name || !addressLine1 || !city || !state || !postalCode || !Phone || !landmark) {
          Swal.showValidationMessage('Please fill all required fields');
          return;
        }

        const error = validateAddressFields({ name, addressLine1, city, state, postalCode, Phone, landmark });
        if (error) {
          Swal.showValidationMessage(error);
          return;
        }

        return { name, addressLine1, city, state, postalCode, Phone, landmark };
      }
    }).then(result => {
      if(result.isConfirmed) {
        fetch('/add-address', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(result.value)
        })
        .then(res => res.json())
        .then(() => {
          Swal.fire({ icon: 'success', title: 'Added!', showConfirmButton: false, timer: 1500 })
            .then(() => location.reload());
        })
        .catch(() => {
          Swal.fire({ icon: 'error', title: 'Failed to add address.' });
        });
      }
    });
  }

  function editAddress(id) {
    fetch(`/editaddresses/${id}`)
      .then(res => res.json())
      .then(data => {
        const addr = data.address;
        Swal.fire({
          title: 'Edit Address',
          html: `
            <input type="text" id="name" class="swal2-input" value="${addr.name}">
            <input type="text" id="addressLine1" class="swal2-input" value="${addr.addressType}">
            <input type="text" id="city" class="swal2-input" value="${addr.city}">
            <input type="text" id="state" class="swal2-input" value="${addr.state}">
            <input type="text" id="postalCode" class="swal2-input" value="${addr.pincode}">
            <input type="text" id="Phone" class="swal2-input" value="${addr.phone}">
            <input type="text" id="landmark" class="swal2-input" value="${addr.landMark}">
          `,
          confirmButtonText: 'Update',
          preConfirm: () => {
            const name = document.getElementById('name').value.trim();
            const addressLine1 = document.getElementById('addressLine1').value.trim();
            const city = document.getElementById('city').value.trim();
            const state = document.getElementById('state').value.trim();
            const postalCode = document.getElementById('postalCode').value.trim();
            const Phone = document.getElementById('Phone').value.trim();
            const landmark = document.getElementById('landmark').value.trim();

            if (!name || !addressLine1 || !city || !state || !postalCode || !Phone || !landmark) {
              Swal.showValidationMessage('All fields are required.');
              return;
            }

            return { name, addressLine1, city, state, postalCode, Phone, landmark };
          }
        }).then(result => {
          if(result.isConfirmed) {
            fetch(`/editaddresses/${id}`, {
              method: 'PUT',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(result.value)
            })
            .then(() => {
              Swal.fire({ icon: 'success', title: 'Updated!', showConfirmButton: false, timer: 1500 })
                .then(() => location.reload());
            })
            .catch(() => {
              Swal.fire({ icon: 'error', title: 'Update failed.' });
            });
          }
        });
      });
  }

  function deleteAddress(id) {
    Swal.fire({
      title: 'Delete Address?',
      text: "This action cannot be undone!",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: 'Yes, delete',
      cancelButtonText: 'Cancel'
    }).then(result => {
      if(result.isConfirmed) {
        fetch(`/addressesdelete/${id}`, { method: 'DELETE' })
        .then(() => {
          Swal.fire({ icon: 'success', title: 'Deleted!', showConfirmButton: false, timer: 1500 })
            .then(() => location.reload());
        })
        .catch(() => {
          Swal.fire({ icon: 'error', title: 'Failed to delete address.' });
        });
      }
    });
  }

  document.getElementById('addAddressBtn')?.addEventListener('click', addAddress);
</script>

</body>
</html>
