<%- include('../../views/partials/user/header.ejs')%>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<section class="shopping-cart spad">
  <div class="container">
    <div class="row">
      <!-- Cart Items -->
      <div class="col-lg-8">
        <div class="shopping__cart__table">
          <table>
            <thead>
              <tr>
                <th>Product</th>
                <th>Quantity</th>
                <th>Total</th>
                <th></th>
              </tr>
            </thead>
            <tbody>
              <% let totalSum = 0; %>
              <% if (cart && cart.items && cart.items.length > 0) { %>
                <% cart.items.forEach(function(item, index) { %>
                  <tr data-product-id="<%= item.productId._id %>">
                    <td class="product__cart__item">
                      <div class="product__cart__item__pic">
                        <!-- Assuming productImage is an array -->
                        <img src="<%= item.productId.productImage[0] %>" 
                             alt="<%= item.productId.productName %>" 
                             style="height: 3cm; width: 2cm;">
                      </div>
                      <div class="product__cart__item__text">
                        <h6><%= item.productId.productName %></h6>
                        <h5>₹ <%= item.price.toFixed(2) %></h5>
                      </div>
                    </td>
                    <td class="quantity__item"> 
                      <div class="quantity">
                        <div class="pro-qty-2">
                          
                          <input type="text" id="is" value="<%= item.quantity %>">
                          
                        </div>
                      </div>
                    </td>
                    <td class="cart__price">
                      ₹ <%= (item.price * item.quantity).toFixed(2) %>
                    </td>
                    <td class="cart__close">
                      <i class="fa fa-close"></i>
                    </td>
                  </tr>
                  <% totalSum += item.price * item.quantity; %>
                <% }); %>
              <% } else { %>
                <tr>
                  <td colspan="4" class="text-center">Your shopping cart is empty</td>
                </tr>
              <% } %>
            </tbody>
          </table>
        </div>
        <div class="row">
          <div class="col-lg-6 col-md-6 col-sm-6">
            <div class="continue__btn">
              <a href="/shop">Continue Shopping</a>
            </div>
          </div>
          <div class="col-lg-6 col-md-6 col-sm-6">
            <div class="continue__btn update__btn">
              <a href="/cart"><i class="fa fa-spinner"></i> Update Cart</a>
            </div>
          </div>
        </div>
      </div>
      <!-- Cart Summary -->
      <div class="col-lg-4">
  
        <div class="cart__total">
          <h6>Cart total</h6>
          <ul>
            <li>Subtotal <span id="subtotal">₹ <%= totalSum.toFixed(2) %></span></li>
            <li>Total <span id="total">₹ <%= totalSum.toFixed(2) %></span></li>
          </ul>
          <a href="/update-cart-item" id="checkoutBtn" class="primary-btn">Proceed to checkout</a>
        </div>
      </div>
    </div>
  </div>
</section>

<%- include('../../views/partials/user/footer.ejs')%>


<script>const cartData = <%- JSON.stringify(cart) %>;

document.addEventListener("DOMContentLoaded", function () {
  // State to track ongoing updates to prevent duplicates
  let isUpdating = false;

  // Update overall cart summary and return total
  function updateCartSummary() {
    let totalSum = 0;
    const rows = document.querySelectorAll("tbody tr[data-product-id]");
    rows.forEach(row => {
      const cartPriceElem = row.querySelector(".cart__price");
      if (cartPriceElem) {
        let rowTotal = parseFloat(cartPriceElem.textContent.replace('₹', '').trim());
        totalSum += rowTotal;
      }
    });
    const subtotalElem = document.getElementById("subtotal");
    const totalElem = document.getElementById("total");
    if (subtotalElem) subtotalElem.textContent = "₹ " + totalSum.toFixed(2);
    if (totalElem) totalElem.textContent = "₹ " + totalSum.toFixed(2);
    console.log(`Cart summary updated: ₹${totalSum.toFixed(2)}`);
    return totalSum * 100; // Convert to paise for backend
  }

  // Function to update cart quantity on the backend
  function updateCartQuantity(row, newQuantity) {
    if (isUpdating) {
      console.log('Update skipped: another update is in progress');
      return Promise.resolve();
    }
    isUpdating = true;
    const productId = row.getAttribute("data-product-id");
    console.log(`Updating quantity for product ${productId} to ${newQuantity}`);
    return fetch('/update-cart-item', {
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ productId, quantity: newQuantity })
    })
      .then(response => {
        if (!response.ok) throw new Error('Failed to update quantity');
        return response.json();
      })
      .then(data => {
        if (!data.success) {
          throw new Error(data.message);
        }
        console.log(`Backend update successful for product ${productId}`);
        updateCartSummary();
      })
      .catch(error => {
        console.error('Update error:', error.message);
        Swal.fire({ icon: 'error', title: 'Error', text: error.message });
        throw error;
      })
      .finally(() => {
        isUpdating = false;
      });
  }

  // Update row total in the frontend
  function updateRowTotal(row, newQuantity) {
    const priceElem = row.querySelector(".product__cart__item__text h5");
    if (priceElem) {
      let priceValue = parseFloat(priceElem.textContent.replace('₹', '').trim());
      const newRowTotal = priceValue * newQuantity;
      row.querySelector(".cart__price").textContent = "₹ " + newRowTotal.toFixed(2);
      console.log(`Updated row total for product ${row.getAttribute("data-product-id")} to ₹${newRowTotal.toFixed(2)}`);
    }
  }

  // Debounce function to prevent multiple rapid clicks
  function debounce(func, wait) {
    let timeout;
    return function (...args) {
      clearTimeout(timeout);
      timeout = setTimeout(() => func.apply(this, args), wait);
    };
  }

  // Handle quantity button clicks (increment/decrement)
  const qtyControls = document.querySelectorAll(".pro-qty-2");
  qtyControls.forEach(control => {
    // Clone to remove any existing listeners
    control.replaceWith(control.cloneNode(true));
  });

  // Re-select controls after cloning
  const newQtyControls = document.querySelectorAll(".pro-qty-2");
  newQtyControls.forEach(control => {
    const input = control.querySelector("input");
    const incBtn = control.querySelector(".inc");
    const decBtn = control.querySelector(".dec");
    const row = control.closest("tr");
    const productId = row.getAttribute("data-product-id");
    const cartItem = cartData.items.find(item => item.productId._id === productId);
    const maxStock = cartItem ? cartItem.productId.quantity : 5;

    // Increment button
    if (incBtn) {
      incBtn.addEventListener("click", debounce(function () {
        let currentVal = parseInt(input.value);
        if (isNaN(currentVal)) currentVal = 1;
        if (currentVal < 5 && currentVal < maxStock) {
          const newQuantity = currentVal + 1;
          input.value = newQuantity;
          console.log(`Incremented product ${productId} to ${newQuantity}`);
          updateRowTotal(row, newQuantity);
          updateCartQuantity(row, newQuantity);
        } else {
          const errorMessage = currentVal >= maxStock 
            ? `Only ${maxStock} in stock for this product.` 
            : 'Maximum quantity is 5.';
          Swal.fire({ icon: 'error', title: 'Quantity Error', text: errorMessage });
        }
      }, 300));
    }

    // Decrement button
    if (decBtn) {
      decBtn.addEventListener("click", debounce(function () {
        let currentVal = parseInt(input.value);
        if (isNaN(currentVal)) currentVal = 1;
        if (currentVal > 1) {
          const newQuantity = currentVal - 1;
          input.value = newQuantity;
          console.log(`Decremented product ${productId} to ${newQuantity}`);
          updateRowTotal(row, newQuantity);
          updateCartQuantity(row, newQuantity);
        }
      }, 300));
    }

    // Manual input change
    input.addEventListener("change", function () {
      console.log(`Manual input changed for product ${productId} to ${this.value}`);
      let newQuantity = parseInt(this.value);
      if (isNaN(newQuantity) || newQuantity < 1) {
        this.value = 1;
        newQuantity = 1;
      }
      if (newQuantity > maxStock) {
        Swal.fire({ icon: 'error', title: 'Stock Error', text: `Only ${maxStock} in stock for this product.` });
        this.value = maxStock;
        newQuantity = maxStock;
      } else if (newQuantity > 5) {
        Swal.fire({ icon: 'error', title: 'Quantity Error', text: 'You cannot add more than 5 products at a time.' });
        this.value = 5;
        newQuantity = 5;
      }
      updateRowTotal(row, newQuantity);
      updateCartQuantity(row, newQuantity);
    });
  });

  // Remove item with SweetAlert confirmation
  const removeBtns = document.querySelectorAll(".cart__close");
  removeBtns.forEach(btn => {
    btn.addEventListener("click", function () {
      const row = this.closest("tr");
      const productId = row.getAttribute("data-product-id");
      Swal.fire({
        title: 'Are you sure?',
        text: "Do you want to remove this item from your cart?",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, remove it!'
      }).then((result) => {
        if (result.isConfirmed) {
          fetch('/remove-cart-item', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ productId })
          })
            .then(response => {
              if (!response.ok) throw new Error('Failed to remove item');
              return response.json();
            })
            .then(data => {
              if (data.success) {
                row.remove();
                updateCartSummary();
                const tbody = document.querySelector("tbody");
                if (tbody.querySelectorAll("tr[data-product-id]").length === 0) {
                  tbody.innerHTML = '<tr><td colspan="4" class="text-center">Your shopping cart is empty</td></tr>';
                }
                Swal.fire('Removed!', 'Your item has been removed.', 'success');
              } else {
                Swal.fire('Error', data.message, 'error');
              }
            })
            .catch(error => {
              console.error('Remove error:', error.message);
              Swal.fire('Error', error.message, 'error');
            });
        }
      });
    });
  });

  // Checkout button logic
  const checkoutBtn = document.getElementById('checkoutBtn');
  if (checkoutBtn) {
    checkoutBtn.addEventListener('click', async function (e) {
      e.preventDefault();
      checkoutBtn.disabled = true;

      let canProceed = true;
      let errorMessage = '';

      // Validate cart
      if (!cartData || !cartData.items || cartData.items.length === 0) {
        canProceed = false;
        errorMessage = 'Your cart is empty.';
      } else {
        for (const item of cartData.items) {
          const productStatus = item.productId.status;
          const productStock = item.productId.quantity;
          const cartQuantity = item.quantity;
          const isBlocked = item.productId.isBlocked;
          const isListed = item.productId.category.isListed;

          if (productStatus.toLowerCase() !== 'available') {
            canProceed = false;
            errorMessage = `The product "${item.productId.productName}" is currently out of stock.`;
            break;
          }
          if (isBlocked) {
            canProceed = false;
            errorMessage = `The product "${item.productId.productName}" is currently blocked. Please remove it from the cart.`;
            break;
          }
          if (!isListed) {
            canProceed = false;
            errorMessage = `The category for "${item.productId.productName}" is not listed. Please remove it from the cart.`;
            break;
          }
          if (productStock < cartQuantity) {
            canProceed = false;
            errorMessage = `The product "${item.productId.productName}" has insufficient stock (${productStock} available). Please reduce the quantity.`;
            break;
          }
        }
      }

      if (canProceed) {
        try {
          const amount = updateCartSummary(); // Get total in paise
          const response = await fetch('/checkout', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ amount }) // Send amount in paise
          });

          const data = await response.json();

          if (data.success) {
            window.location.href = "/checkout"; // Redirect to checkout page
          } else {
            Swal.fire({ icon: 'error', title: 'Checkout Failed', text: data.message });
            checkoutBtn.disabled = false;
          }
        } catch (error) {
          console.error('Checkout error:', error);
          Swal.fire({ icon: 'error', title: 'Error', text: 'Something went wrong during checkout.' });
          checkoutBtn.disabled = false;
        }
      } else {
        Swal.fire({
          icon: 'error',
          title: 'Checkout Failed',
          text: errorMessage,
        });
        checkoutBtn.disabled = false;
      }
    });
  }

  // Initialize cart summary
  updateCartSummary();
});</script>
